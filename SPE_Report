\documentclass[a4paper]{article}
\usepackage{vntex}
%\usepackage[english,vietnam]{babel}
%\usepackage[utf8]{inputenc}

%\usepackage[utf8]{inputenc}
%\usepackage[francais]{babel}
\usepackage{a4wide,amssymb,epsfig,latexsym,multicol,array,hhline,fancyhdr}

\usepackage{amsmath}
\usepackage{lastpage}
\usepackage[lined,boxed,commentsnumbered]{algorithm2e}
\usepackage{enumerate}
\usepackage{color}
\usepackage{graphicx}							% Standard graphics package
\usepackage{array}
\usepackage{tabularx, caption}
\usepackage{multirow}
\usepackage{multicol}
\usepackage{rotating}
\usepackage{graphics}
\usepackage[left = 2.5cm, right = 2cm]{geometry}
\usepackage{setspace}
\usepackage{epsfig}
\usepackage{tikz}
\usetikzlibrary{arrows,snakes,backgrounds}
\usepackage{hyperref}
\hypersetup{urlcolor=blue,linkcolor=black,citecolor=black,colorlinks=true} 
%\usepackage{pstcol} 								% PSTricks with the standard color package

\newtheorem{theorem}{{\bf Định lý}}
\newtheorem{property}{{\bf Tính chất}}
\newtheorem{proposition}{{\bf Mệnh đề}}
\newtheorem{corollary}[proposition]{{\bf Hệ quả}}
\newtheorem{lemma}[proposition]{{\bf Bổ đề}}


%\usepackage{fancyhdr}
\setlength{\headheight}{40pt}
\pagestyle{fancy}
\fancyhead{} % clear all header fields
\fancyhead[L]{
 \begin{tabular}{rl}
    \begin{picture}(25,15)(0,0)
    \put(0,-8){\includegraphics[width=8mm, height=8mm]{hcmut.png}}
    %\put(0,-8){\epsfig{width=10mm,figure=hcmut.eps}}
   \end{picture}&
	%\includegraphics[width=8mm, height=8mm]{hcmut.png} & %
	\begin{tabular}{l}
		\textbf{\bf \ttfamily Trường Đại Học Bách Khoa Tp.Hồ Chí Minh}\\
		\textbf{\bf \ttfamily Khoa Khoa Học và Kỹ Thuật Máy Tính}
	\end{tabular} 	
 \end{tabular}
}
\fancyhead[R]{
	\begin{tabular}{l}
		\tiny \bf \\
		\tiny \bf 
	\end{tabular}  }
\fancyfoot{} % clear all footer fields
\fancyfoot[L]{\scriptsize \ttfamily 2019 - 2020}
\fancyfoot[R]{\scriptsize \ttfamily Trang {\thepage}/\pageref{LastPage}}
\renewcommand{\headrulewidth}{0.3pt}
\renewcommand{\footrulewidth}{0.3pt}


%%%
\setcounter{secnumdepth}{4}
\setcounter{tocdepth}{3}
\makeatletter
\newcounter {subsubsubsection}[subsubsection]
\renewcommand\thesubsubsubsection{\thesubsubsection .\@alph\c@subsubsubsection}
\newcommand\subsubsubsection{\@startsection{subsubsubsection}{4}{\z@}%
                                     {-3.25ex\@plus -1ex \@minus -.2ex}%
                                     {1.5ex \@plus .2ex}%
                                     {\normalfont\normalsize\bfseries}}
\newcommand*\l@subsubsubsection{\@dottedtocline{3}{10.0em}{4.1em}}
\usepackage{listings}
\usepackage{color}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{frame=tb,
  language=Python,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  basicstyle={\small\ttfamily},
  numbers=none,
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{blue},
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  breaklines=true,
  breakatwhitespace=true,
  tabsize=3
}
\newcommand*{\subsubsubsectionmark}[1]{}
\makeatother

\begin{document}
\begin{titlepage}
\begin{center}
\large ĐẠI HỌC QUỐC GIA THÀNH PHỐ HỒ CHÍ MINH \\
TRƯỜNG ĐẠI HỌC BÁCH KHOA \\
KHOA KHOA HỌC & KỸ THUẬT MÁY TÍNH 
\end{center}

\vspace{1cm}

\begin{figure}[h!]
\begin{center}
\includegraphics[width=3cm]{hcmut.png}
\end{center}
\end{figure}

\vspace{1cm}

\begin{center}
\begin{tabular}{c}
\textbf{{\Large{ ĐÁNH GIÁ HIỆU NĂNG HỆ THỐNG}}}\\
~~\\
\hline
\hline
\\
\vspace{0.5cm}
\textbf{{\Huge BÀI TẬP LỚN }}\\

\textbf{{\LARGE Mô phỏng hệ thống hàng dùng Simpy}}\\
\\
\textbf{{\LARGE Chủ đề 7 }}\\
\\
\hline
\hline
\end{tabular}
\end{center}

\vspace{1.5 cm}

\begin{table}[h]

\begin{tabular}{rrl}

\hspace{6 cm} & \Large  \textbf{GVHD:} & \Large \textbf{Trần Văn Hoài}\\
\hspace{6 cm} & \Large  \textbf{Thành viên :} & \Large Đặng Hữu Nam - 1720034\\
\hspace{6 cm} & \Large& \Large Võ Nguyễn Phi Long - 1712033\\
\hspace{6 cm} & \Large& \Large Từ Nguyên Gia Khiêm - 1711754

\end{tabular}
\end{table}

\vspace{1.3cm}

\begin{center}
{\large TP. HỒ CHÍ MINH, THÁNG 12/2019}
\end{center}
\end{titlepage}


%\thispagestyle{empty}

\newpage \tableofcontents
%\newpage \listoffigures
% \newpage \listoftables

\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Giới thiệu}
{
 \textbf{Chủ đề 8}:\\
 Mạng 2 hàng Q_{1} = M/M($\mu_{1}$)/1, Q_{2} = M/M($\mu_{2}$)/1,  trong đó $Q_{1}\rightarrow{}Q_{2}$ với  $p_{12}$ = 0.8; $Q_{1}\rightarrow{}Q_{1}$ với $p_{11}$ = 0.2; quá trình đến $Q_{1}$ với $\lambda$, công việc sau khi qua $Q_{2}$, sẽ rời khỏi hệ thống. 
 \begin{figure}[h!]
\begin{center}
\includegraphics[width=15cm]{system.png}
\end{center}
\end{figure}

}
\section{Quá trình đánh giá hiệu năng hệ thống}
{

\subsection{Xác định các mục tiêu và Định nghĩa Hệ thống}
{
    \begin{itemize}
    \item \textbf {Mục tiêu:} Mô phỏng hoạt động của Hệ thống hàng bằng Simpy trong một khoảng thời gian nhất định và Đánh giá độ chính xác của quá trình mô phỏng so với Lý thuyết.
    \item \textbf {System:} Một hệ thống hàng gồm 2 hàng đơn M/M/1 $Q_{1}$ và $Q_{2}$; mỗi hàng đợi đều có riêng service rate ($\mu_{1}$) và ($\mu_{2}$); Job sau khi rời khỏi $Q_{1}$ hoặc quay trở lại $Q_{1}$ với $p_{11}$ = 0.2 hoặc tới $Q_{2}$ với $p_{2}$ = 0.2 sau đó rời khỏi hệ thống. 
        %\item \textbf{Mục tiêu 1: } Xác định số Jobdone của System 1, System 2, System 3 (Jobsdone)
        %\item \textbf{Mục tiêu 2: } Xác định hiệu suất sử dụng Server 1, Server 2, Server 3 (Utilization)
        %\item \textbf{Mục tiêu 3: } Xác định thời gian đợi trung bình của 1 Job của System 1, System 2, System 3 (Meanwaitingtime)\\
        %\item \textbf{Mục tiêu 4: } Xác định độ dài hàng đợi trung bình của Server 1 (numofJobqueue)
        %\item \textbf{ Mục tiêu 5: } Xác định số Jobs trung bình của System 1 và phương sai của nó(numofJobsystem,VarofReplication)
        %\item \textbf{Mục tiêu 6: } Xác định xác suất số Job của Server 1 lớn hơn hoặc bằng N (ProbNjob)
        %\item \textbf{Mục tiêu 7: } Xác định số Jobsdone cuả cả System 
        %\item \textbf{Mục tiêu 8:} Xác định thời gian đợi trung bình của 1 Job trên cả System
        %\item \textbf{Mục tiêu 9:} Đánh giá hiệu quả khi áp dụng các kỹ thuật Transient Removal hay Terminating Simulation đối với hệ thống.
    \end{itemize}
}
\subsection{Các Chức năng và Kết quả có thể thu được của Hệ thống}
{
	\begin{itemize}
	    \item \textbf{ Chức năng:} 
	    \begin{itemize}
	        \item Đưa một Job vào trong System
	        \item Thực hiện Job
	        \item Kết thúc và Đưa Job rời khỏi hệ thống
	    \end{itemize}
	    \item \textbf{ Outcome: }
	    \begin{itemize}
	        \item Job được thực hiện thành công và rời khỏi hệ thống
	        \item Job đang chờ trong $Q_{1}$
	        \item Job đang chờ trong $Q_{2}$
	        \item Job vẫn đang được thực hiện trong $Q_{1}$
	        \item Job vẫn đang được thực hiện trong $Q_{2}$
	    \end{itemize}
	\end{itemize}
}
\subsection{Select Metrics}
{
    \begin{itemize}
        \item  Hiệu suất sử dụng hệ thống ( Utilization )
        \item Thời gian phục vụ trung bình của hệ thống ( Mean service time )
        \item Số lượng Job trung bình nằm trong hệ thống ( Mean Job in System )
        \item Phương sai của số lượng Job trung bình nằm trong hệ thống (Variance of Job in System)
    \end{itemize}
}
\subsection{List Parameters}
{
	\subsubsection{System parameter}
	{
	    \begin{itemize}
	        \item \textbf{Service rate of Server 1} : $\mu_{1}$
	        \item \textbf{Service rate of Server 2} : $\mu_{2}$
	        \item \textbf{Service rate of Server 3} : $\mu_{3}$
	    \end{itemize}
	}
	\subsubsection{Workload parameter}
	{
	   
	    \begin{itemize}
	        \item \textbf{Arrival rate to Server 1} : $\lambda_{1}$
	        \item \textbf{MaxTime of Simulation} : MAXTIME
	        \item  \textbf{M replication for transient removal and terminating simulation} : M
	        \item \textbf{Probability of N or more jobs in the system} : N
	        \item \textbf{Knee được xác định bởi Tan= delta(lenght of queue)/delta(time)} : Tan
	        \item \textbf{Độ tin cậy 1-alpha} : alpha
	    \end{itemize}
	}
}
\subsection{List Factors to Study}
{
	    \begin{itemize}
	        \item \textbf{Arrival rate to Server 1} : $\lambda_{1}$
	        \item \textbf{Service rate of Server 1} : $\mu_{1}$
	        \item  \textbf{Service rate of Server 2} : $\mu_{2}$
	        \item \textbf{Service rate of Server 3} : $\mu_{3}$
	        \item \textbf{MaxTime of Simulation} : MAXTIME
	        \item \textbf{M replication for transient removal and terminating simulation} : M
	        \item \textbf{Knee được xác định bởi Tan= delta(lenght of queue)/delta(time)} : Tan
	        \item \textbf{Độ tin cậy 1-alpha} : alpha
	    \end{itemize}
}
\subsection{Select Evaluation Technique}
{
	- Kĩ thuật đánh giá : Mô phỏng
}
\subsection{Select Workload}
{
    \begin{itemize}
        \item Synthesis Workload :
        \begin{itemize}
            \item JobGenerator with arrival time is exponential distributed
            \item M replication
            \item MaxTime of Simulation : MAXTIME
        \end{itemize}
    \end{itemize}
}
\subsection{Design Experiments}
{
	- Mô phỏng được thiết kế bằng ngôn ngữ python:
	\subsubsection{Danh sách các package được sử dụng}
	{
    \begin{lstlisting}
    import simpy
    #import random
    import numpy.random as random
    import scipy.stats as ss
    import math
    import matplotlib.pyplot as plt
    \end{lstlisting}
    }
    \newpage
	\subsubsection{List parameter}
	{
	\begin{lstlisting}
   ''' ------------------------ '''
''' Parameters               '''
''' ------------------------ '''
MU1=8
MU2=4
MU3=8
LAMDA=7.5
LOGGED = True
VERBOSE = False
MAXSIMTIME = 200
'''
Probability of N or more jobs in the system
'''
N = 2
''' M relplication for transient removal and terminating simulation'''
M = 10
''' Knee duoc xac dinh boi Tan= delta(lenght of queue)/delta(time)  '''
Tan = 0.0001
''' Do tin cay 1-alpha '''
alpha = 0.05 

    \end{lstlisting}
    }
	\subsubsection{Định nghĩa Job: Job}
	{
	\begin{lstlisting}
    class Job:
    def __init__(self, name, arrtime, duration,server):
        self.name = name
        self.arrtime = arrtime
        self.duration = duration
        self.server=server
    def __str__(self):
        return '%s at %d, length %d,at Server %s' %(self.name, self.arrtime, self.duration,self.server.name)
    \end{lstlisting}
    }
	\subsubsection {Định nghĩa trạng thái của hàng đợi : state}
	{
	\begin{lstlisting}
    class state:
    def __init__(self,job_len,time):
        self.job_len=job_len
        self.time= time
    \end{lstlisting}
    }
    \newpage
	\subsubsection{Định nghĩa Server1: server-inout}
	{
	\begin{lstlisting}
   class Server_inout:
    def __init__(self, env,name,server_out1,mu1,server_out2,mu2):
        self.env = env
        self.name = name
        self.server_out1=server_out1
        self.server_out2=server_out2
        self.servicetime1=float(1/float(mu1))
        self.servicetime2=float(1/float(mu2))
        self.Jobs = list(())
        self.queue = list(())
        self.system=list(())
        self.serversleeping = None
        ''' statistics '''
        self.waitingTime = 0
        self.numberofJobqueue = 0
        self.numberofJobsystem = 0
        self.varofJobSystem=0
        self.probabilityofNJob=0
        self.idleTime = 0
        self.jobsDone = 0
        ''' register a new server process '''
        self.env.process( self.serve() )
    def compute_numberofJob(self,k):
        numberofqueuextime = 0
        i=0
        while i<len(self.queue)-1:
            numberofqueuextime+=self.queue[i].job_len*(self.queue[i+1].time-self.queue[i].time)
            i+=1
        self.numberofqueue=float(numberofqueuextime/MAXSIMTIME)
        numberofsystemxtime = 0
        i=k
        while i<len(self.system)-1:
            numberofsystemxtime+=self.system[i].job_len*(self.system[i+1].time-self.system[i].time)
            i+=1
        self.numberofJobsystem=float(numberofsystemxtime/(MAXSIMTIME-self.system[k].time))
    def compute_varofJobSystem(self,k):
        '''(Jobsystem*time)^2'''
        ''' a=(self.numberofJobsystem**2)*self.system[0].time/MAXSIMTIME+((self.system[len(self.system)-1].
        job_len-self.numberofJobsystem)**2)*(MAXSIMTIME-self.system[len(self.system)-1].time)/MAXSIMTIME'''
        a=0
        i=k
        while i<len(self.system)-1:
            a+=((self.system[i].job_len-self.numberofJobsystem)**2)*(self.system[i+1].time-
            self.system[i].time)/(MAXSIMTIME-self.system[k].time)
            i+=1
        self.varofJobSystem=a
    def compute_probilityofNJobs(self,n,k):
        a=0 
        i=k
        if (n==0) :
            self.probabilityofNJob = 1
        else :
            while i<len(self.system)-1:
                    if (self.system[i].job_len>=n):
                        a+=self.system[i+1].time-self.system[i].time
                    i+=1
            self.probabilityofNJob=a/MAXSIMTIME
    def serve(self):
        while True:
            ''' do nothing, just change server to idle
              and then yield a wait event which takes infinite time
            '''         
            if len(self.Jobs)==0:
                self.serversleeping = env.process( self.waiting( self.env ))
                t1 = self.env.now
                yield self.serversleeping
                ''' accumulate the server idle time'''
                self.idleTime += self.env.now - t1
            else:
                j=self.Jobs.pop(0)
                ''' add queue_state to queue list'''
                self.queue.append(state(len(self.Jobs),self.env.now))
                ''' sum up the waiting time'''
                self.waitingTime += self.env.now - j.arrtime
                ''' yield an event for the job finish'''
                yield self.env.timeout( j.duration )
                ''' sum up the jobs done '''
                self.jobsDone += 1
                ''' add system_state to system list'''
                self.system.append(state(len(self.Jobs),self.env.now))
                '''append Job to server_out1 or server_out2'''
                a=random.randint(1,10)
                if VERBOSE:
                    print('%s done : t = %.2f , %s'%(j.name,self.env.now,self.name))
                if( a>=1 and a<=3) : 
                    duration1=random.exponential(self.servicetime1)
                    if VERBOSE:
                        print('%s come : t = %.2f , duration time = %d , %s'%(j.name,self.env.now,duration1
                        ,str(self.server_out1.name)))
                    self.server_out1.Jobs.append(Job(j.name,self.env.now,duration1,self.server_out1))
                    if not self.server_out1.serversleeping.triggered:
                        self.server_out1.serversleeping.interrupt()
                else:
                    duration2=random.exponential(self.servicetime2)
                    if VERBOSE:
                        print('%s come : t = %.2f ,duration time = %d , %s'%(j.name,self.env.now,duration2,
                        str(self.server_out2.name)))
                    self.server_out2.Jobs.append(Job(j.name,self.env.now,duration2,self.server_out2))
                    if not self.server_out2.serversleeping.triggered:
                        self.server_out2.serversleeping.interrupt()
    def waiting(self, env):
        try:
            if VERBOSE:
                 print( '%s is idle at %.2f' %(self.name, self.env.now) )
            yield self.env.timeout( MAXSIMTIME )
        except simpy.Interrupt as i:
            if VERBOSE:
                 print('%s waken up and works at %.2f' %(self.name, self.env.now) )

    \end{lstlisting}
	}
	\subsubsection{Định nghĩa Server 2, Server 3: server-in }
    \begin{lstlisting}
    class Server_in:
    def __init__(self, env,name):
        self.env = env
        self.name = name
        self.Jobs = list(())
        self.serversleeping = None
        ''' statistics '''
        self.waitingTime = 0
        self.idleTime = 0
        self.jobsDone = 0
        ''' register a new server process '''
        self.env.process(self.serve())

    def serve(self):
        while True:
            ''' do nothing, just change server to idle
              and then yield a wait event which takes infinite time
            '''
            if len(self.Jobs)==0 :
                self.serversleeping =self.env.process( self.waiting( self.env ))
                t1 = self.env.now
                yield self.serversleeping
                ''' accumulate the server idle time'''
                self.idleTime += self.env.now - t1
            else:
                j = self.Jobs.pop( 0 )
                ''' sum up the j = self.Jobs.pop( 0 )waiting time'''

                self.waitingTime += self.env.now - j.arrtime
                ''' yield an event for the job finish'''
                yield self.env.timeout( j.duration )
                ''' sum up the jobs done '''

                self.jobsDone += 1
                if VERBOSE:
                    print('%s done : t = %.2f ,%s'%(j.name,self.env.now,self.name))

    def waiting(self, env):
        try:
            if VERBOSE:
                print( '%s is idle at %.2f' % (self.name,self.env.now) )
            yield self.env.timeout( MAXSIMTIME )
        except simpy.Interrupt as i:
            if VERBOSE:
                 print('%s waken up and works at %.2f' % (self.name,self.env.now))
    \end{lstlisting}
	\subsubsection{Định nghĩa bộ tạo Job : JobGenerator}
	\begin{lstlisting}
    class JobGenerator:
    def __init__(self, env, server,mu,lam):
        self.env= env
        self.server= server
        self.servicetime=float(1/float(mu))
        self.interarrivaltime =float( 1/float(lam))
        env.process( self.generatejobs(env) )

    def generatejobs(self, env):
        i = 1
        while True:
            '''yield an event for new job arrival'''
            job_interarrival = random.exponential( self.interarrivaltime )
            yield env.timeout( job_interarrival )
            ''' generate service time and add job to the list'''
            job_duration=random.exponential( self.servicetime )
            self.server.Jobs.append( Job('Job %s' %i, self.env.now, job_duration,self.server) )
            self.server.queue.append(state(len(self.server.Jobs),self.env.now))
            self.server.system.append(state(len(self.server.Jobs),self.env.now))
            if VERBOSE:
                print( 'Job %d come : t = %.2f, duration time  = %.2f, arrival time = %.2f ,%s' 
                    %( i, self.env.now, job_duration, job_interarrival,self.server.name ) )
            i += 1
            if not self.server.serversleeping.triggered:
                self.server.serversleeping.interrupt( 'Wake up, please.' )
    \end{lstlisting}
}
\subsection{Analyze and Interpret Data}
{
\subsubsection{Start simulation}
    \begin{lstlisting}
        ''' start simulation '''
        env = simpy.Environment()
        MyServer2 = Server_in( env,"Server B")
        MyServer3 = Server_in( env,"Server C")
        MyServer1 = Server_inout( env,"Server A",MyServer2,MU2,MyServer3,MU3)
        MyJobGenerator = JobGenerator( env, MyServer1,MU1,LAMDA )
        env.run( until = MAXSIMTIME )
        MyServer1.compute_numberofJob(0)
        MyServer1.compute_varofJobSystem(0)
        MyServer1.compute_probilityofNJobs(N,0)
        Jobsys=MyServer1.numberofJobsystem
        Varsys=MyServer1.varofJobSystem
        ProbNjob=MyServer1.probabilityofNJob
    \end{lstlisting}
\subsubsection{Transient removal}
{
    \begin{lstlisting}
    ''' be used to creat M replication MM1 '''

listEnv=list()
listJobGeneration=list()
listServer1=list()
listServer2=list()
listServer3=list()

''' Mean across replication '''
meanJnumberofJob=list()
''' Mean of last n-1 observations '''
meanLnumberofJob=list()
''' Relative change '''
meanRelativeChange=list()
i=0
while i<M:
    listEnv.append(simpy.Environment())
    listServer2.append(Server_in(listEnv[i],"Server B"))
    listServer3.append(Server_in(listEnv[i],"Server C"))
    listServer1.append(Server_inout(listEnv[i],"Server A",listServer2[i],MU2,listServer3[i],MU3))
    listJobGeneration.append(JobGenerator(listEnv[i],listServer1[i],MU1,LAMDA))
    env=listEnv[i]
    env.run( until = MAXSIMTIME )
    listServer1[i].compute_numberofJob(0)
    listServer1[i].compute_varofJobSystem(0)
    listServer1[i].compute_probilityofNJobs(N,0)
    i+=1
''' determind min of length M replication '''
min_=len(listServer1[0].system)
i=1
while  i<M:
    min_=min(min_,len(listServer1[i].system))
    i+=1
''' transient removal : 
number of job system
Variance of the number of jobs in the system
Probability of 3 or more jobs in the system
'''
''' compute MeanJ'''
i=0
while i< min_:
    j=0
    sumJob=0.0
    sumTime=0.0
    while j<M:
        sumJob+=listServer1[j].system[i].job_len
        sumTime+=listServer1[j].system[i].time
        j+=1
    meanJnumberofJob.append(state(float(sumJob/M),float(sumTime/M)))
    i+=1
'''compute Overall Mean'''
i=0
sumJob=0.0
while i<min_:
    sumJob+=meanJnumberofJob[i].job_len
    i+=1
overallMeanJob=float(sumJob/min_)
''' compute MeanL'''
i=0
while i< min_:
    j=i
    sumJob=0.0
    sumTime=0.0
    while j<min_:
        sumJob+=meanJnumberofJob[j].job_len
        sumTime+=meanJnumberofJob[j].time
        j+=1
    meanLnumberofJob.append(state(float(sumJob/(min_-i)),meanJnumberofJob[i].time))
    i+=1
'''compute relative change '''
i=0
while i< min_:
    meanRelativeChange.append(state(float((meanLnumberofJob[i].job_len-overallMeanJob)/overallMeanJob),meanLnumberofJob[i].time))
    i+=1
''' determind knee '''
tan=list()
i=0
while i<min_-1:
    tan.append(state((meanRelativeChange[i+1].job_len-meanRelativeChange[i].job_len),i))
    if (tan[i].job_len<Tan):
        break
    i+=1
k=i
''' 
recomputing with knee = k
number of job system
Variance of the number of jobs in the system
Probability of 3 or more jobs in the system
'''
MyServer1.system=meanJnumberofJob
MyServer1.compute_numberofJob(k)
MyServer1.compute_varofJobSystem(k)
MyServer1.compute_probilityofNJobs(N,k)
Jobsys1=MyServer1.numberofJobsystem
Varsys1=MyServer1.varofJobSystem
ProbNjob1=MyServer1.probabilityofNJob
    \end{lstlisting}
}
\subsubsection{Terminating simulations}
{
    \begin{lstlisting}
    ''' Terminating simulation'''
''' Mean for each replication from knee k'''
MeanReplication=list()
i=0
j=k
while i<M:
    sumjob=0
    j=k
    while j<len(listServer1[i].system):
        sumjob+=listServer1[i].system[j].job_len
        j+=1
    MeanReplication.append(float(sumjob/(len(listServer1[i].system)-k)))
    i+=1
''' Mean all replication '''
i=0
sumjob=0
while i<M:
    sumjob+=MeanReplication[i]
    i+=1
MeanallReplication=sumjob/M
''' Variance of replicate means '''
i=0
VarofReplication=0
while i<M:
    VarofReplication+=(MeanReplication[i]-MeanallReplication)**2
    i+=1
VarofReplication=VarofReplication/(M-1)
''' Confidence interval for the mean '''
z=-ss.norm.ppf(alpha/2)
x=MeanallReplication-z*math.sqrt(VarofReplication)/math.sqrt(M-1)
y=MeanallReplication+z*math.sqrt(VarofReplication)/math.sqrt(M-1)
    \end{lstlisting}
}
\subsubsection{Show outcome}
    \begin{lstlisting}
    print('Initial removal : %.2f'%k)
print('%s'%MyServer1.name)
print( 'JobsDone               : %d' % (MyServer1.jobsDone) )
print( 'Utilization            : %.2f/%.2f' 
    % (1.0-MyServer1.idleTime/MAXSIMTIME, RHO1) )
print( 'Mean waiting time      : %.2f/%.2f' 
    % (MyServer1.waitingTime/MyServer1.jobsDone, RHO1**2/((1-RHO1)*LAMDA) ) )
print( 'Mean service time      : %.2f/%.2f' 
    % ((MAXSIMTIME-MyServer1.idleTime)/MyServer1.jobsDone, 1/MU1) ) 

print( 'Mean number of Jobs queue: %.2f/%.2f'% (MyServer1.numberofqueue,RHO1**2/(1-RHO1)))
print( 'Mean number of Jobs system: %.2f/%.2f/%.2f'% (Jobsys,Jobsys1,RHO1/(1-RHO1)))
print( 'Variance of the number of jobs in the system : %.2f/%.2f/%.2f'% (Varsys,Varsys1,RHO1/((1-RHO1)**2)))
print( 'Probability of %d or more jobs in the system : %.2f/%.2f/%.2f'% (N,ProbNjob,ProbNjob1,RHO1**N))
print( 'Variance of %d replication means : %.2f '%(M,VarofReplication))
print( 'Confidence interval for the mean with 1-alpha = %.2f : [%.2f : %.2f]'%(1-alpha,x,y))
print('%s'%MyServer2.name)
print( 'JobsDone               : %d' % (MyServer2.jobsDone) )
print( 'Utilization            : %.2f/%.2f'  % (1.0-MyServer2.idleTime/MAXSIMTIME,RHO2) )
print( 'Mean waiting time      : %.2f/%.2f' 
    % (MyServer2.waitingTime/MyServer2.jobsDone ,RHO2**2/((1-RHO2)*MU1*0.3)) )
print( 'Mean service time      : %.2f/%.2f' 
    % ((MAXSIMTIME-MyServer2.idleTime)/MyServer2.jobsDone, 1/MU2) ) 
print('%s'%MyServer3.name)
print( 'JobsDone               : %d' % (MyServer3.jobsDone) )
print( 'Utilization            : %.2f/%.2f' 
    % (1.0-MyServer3.idleTime/MAXSIMTIME,RHO3) )
print( 'Mean waiting time      : %.2f/%.2f ' 
    % (MyServer3.waitingTime/MyServer3.jobsDone ,RHO3**2/((1-RHO3)*MU1*0.7)) )
print( 'Mean service time      : %.2f/%.2f' 
    % ((MAXSIMTIME-MyServer3.idleTime)/MyServer3.jobsDone, 1/MU3) ) 
print ('Total system')
print ('Mean utilization = %.2f'%((3*MAXSIMTIME-MyServer1.idleTime-MyServer2.idleTime-MyServer3.idleTime)
/(3*MAXSIMTIME)))
print ('Job departure = %d'%(MyServer2.jobsDone+MyServer3.jobsDone))
print ('Mean waiting time of Total System = %.2f'%(float((MyServer1.waitingTime+MyServer2.waitingTime
+MyServer3.waitingTime)/(MyServer2.jobsDone+MyServer3.jobsDone))))
print ('Mean service time of Total System = %.2f'%(float((3*MAXSIMTIME-MyServer1.idleTime-MyServer2.idleTime
-MyServer3.idleTime)/(MyServer2.jobsDone+MyServer3.jobsDone))))
i=0
while i<len(meanLnumberofJob):
    if LOGGED:
        qlog.write( '%.6f\t%.6f\n'% (meanJnumberofJob[i].job_len,meanLnumberofJob[i].time ))
    i+=1
if LOGGED:
    qlog.close()
x=list()
y=list()
i=0
while i<len(meanJnumberofJob):
    x.append(meanJnumberofJob[i].time)
    y.append(meanJnumberofJob[i].job_len)
    i+=1
plt.plot(x,y)
plt.xlabel('Time')
plt.ylabel('MeanJ Job in System')
plt.show()
x=list()
y=list()
i=0
while i<len(meanLnumberofJob):
    x.append(meanLnumberofJob[i].time)
    y.append(meanLnumberofJob[i].job_len)
    i+=1
plt.plot(x,y)
plt.xlabel('Time')
plt.ylabel('MeanL Job in System')
plt.show()
x=list()
y=list()
i=0
while i<len(meanRelativeChange):
    x.append(meanRelativeChange[i].time)
    y.append(meanRelativeChange[i].job_len)
    i+=1
plt.plot(x,y)
plt.xlabel('Time')
plt.ylabel('MeanR Job in System')
plt.show()
    \end{lstlisting}
\subsection{Present Results}
{
	\begin{lstlisting}
	Initial removal : 578.00
Server A
JobsDone               : 1476
Utilization            : 0.92/0.94
Mean waiting time      : 0.75/1.88
Mean service time      : 0.12/0.12
Mean number of Jobs queue: 5.57/14.06
Mean number of Jobs system: 6.05/16.79/15.00
Variance of the number of jobs in the system : 24.07/11.88/240.00
Probability of 2 or more jobs in the system : 0.80/0.77/0.88
Variance of 10 replication means : 53.73 
Confidence interval for the mean with 1-alpha = 0.95 : [12.60 : 22.17]
Server B
JobsDone               : 500
Utilization            : 0.64/0.60
Mean waiting time      : 0.52/0.38
Mean service time      : 0.25/0.25
Server C
JobsDone               : 974
Utilization            : 0.58/0.70
Mean waiting time      : 0.20/0.29 
Mean service time      : 0.12/0.12
Total system
Job departure = 1474
Mean utilization = 0.71
Mean waiting time of Total System = 1.05
Mean service time of Total System = 0.29
	\end{lstlisting}
	\newpage
    - Mean trajectory by averaging across replications
    \begin{center}
        \fontsize{15}
        $\overline{x_j}=\frac{1}{m}\displaystyle \sum_{i=1}^m x_{ij} $ \\
        with $j=1,2,...,n$
    \end{center}
    \begin{figure}[h!]
    \includegraphics[width=16cm]{meanj.png}
    \end{figure}
    \newpage
    -Delete the first l observations and get an overall mean from the remaining n − l values
    \begin{center}
       \fontsize{15} $\overline{\overline{x_l}}=\frac{1}{n-l}\displaystyle \sum_{i=l+1}^n x_{j}$
    \end{center}
    \begin{figure}[h!]
    \includegraphics[width=16cm]{meanL.png}
    \end{figure}
    \newpage
    - Compute the relative change
    \begin{center}
        \fontsize{15}
        $\overline{\overline{x_r}}=\frac{\overline{\overline{x_l}}-\overline{\overline{x}}}{\overline{\overline{x}}}$ \\
        with $\overline{\overline{x}}=\frac{1}{n}\displaystyle \sum_{i=1}^n x_{j}$
    \end{center}
     \begin{figure}[h!]
    \includegraphics[width=16cm]{meanR.png}
    \end{figure}
    \newpage
    \textbf{Validation:}
    \begin{figure}[h!]
    \includegraphics[width=16cm]{Capture.PNG}
    \end{figure}
    \\
    \textbf{ Nhận xét:}
     Dựa vào bảng trên ta thấy: Trước khi thực hiện kĩ thuật Transient removal thì kết quả của Simulation model khá gần với Analyst model,nhưng sau khi thực hiện kĩ thuật trên thì với việc loại bỏ được 578 trạng thái đầu tiền chưa ổn định của meanJobofSystem thì kết quả lại rất gần với Analyst model. Đặc biệt , phương sai của Simulation model sau khi thực hiện kĩ thuật Transient Removal (11.88) nhỏ hơn nhiều so với Simulation model trước khi Transient Removal (16.79) và Analyst model (240). 
    
}

}
  
}
\end{document}
